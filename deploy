#!/bin/bash
###############################################################################
# Project: hi-cli
# Description: The cross platform development toolkit - hi-cli
# Author: John Deng (john.deng@outlook.com)
#
# Copyright (c) 2014-2017 John Deng (john.deng@outlook.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Author: John Deng (john.deng@outlook.com)
# Updated: Mon Mar 27 23:24:29 CST 2017
# Module: oc
# Submodule: 
# Command: deploy
###############################################################################

source "${HI_CLI_HOME}/bin/colors"
source "${HI_CLI_HOME}/bin/logging"
source "${HI_CLI_HOME}/bin/logging"
source "${module_dir}/utils/common"
###############################################################################
function deploy() {
  # deploy(project, app, ver, "dev", "Asia/Shanghai")
  
  ensure_oc_login

  [ "${profile}" == "" ] && project_profile=${project}  || project_profile="${project}-${profile}"
  image_tag="latest"
  
  env_app_options=""
  env_profile=""
  if [ -f ./package.json ]; then
    log_debug "found nodejs app"
    ver=$(get_nodejs_app_version)
    from_dir="dist"
    image_stream="s2i-nodejs:1.0.0"
    if [ ! -f dist/package.json ] || [ "${build}" == "build" ]; then
      npm install
      [ -f gulpfile.js ] && gulp build --env=${profile} || npm run build:${profile}
      create_package_json "dist/package.json"
    fi

  elif [ -f ./SUMMARY.md ] && [ -f ./README.md ]; then
    log_debug "found gitbook app"
    [[ "${ver}" == "" ]] && ver="1.0.0"
    from_dir="dist"
    image_stream="s2i-gitbook:latest"
    if [ ! -f dist/package.json ] || [ "${build}" == "build" ]; then
      gitbook build . dist
      create_package_json "dist/package.json"
    fi
  elif [ -f pom.xml ]; then
    log_debug "found java app"

    env_profile="--env SPRING_PROFILES_ACTIVE=${profile}"
    env_app_options="--env APP_OPTIONS=\"${app_options}\""

    from_dir="oc-build"
    ver=$(get_java_app_version)
    log_debug "ver: ${ver}"
    if [ ! -f target/${app}-${ver}.jar ] && [ ! -f target/${app}.war ]; then
      build="build"
    fi

    if [ "${build}" == "build" ]; then
      mvn clean package
    fi
  fi  
  log_debug "deploy: ${project}/${app}, ${ver}, ${project_profile}, ${timezone} ${port}"

  if [ "" != "${new}" ]; then
    if [ -f target/${app}.war ]; then
      mkdir -p oc-build/deployments
      rm -rf oc-build && mkdir -p oc-build/deployments
      ls target/${app}.war
      log_debug "cp target/${app}.war oc-build/deployments/ROOT.war"
      cp target/${app}.war oc-build/deployments/ROOT.war
      image_stream="s2i-java-war:latest"
    elif [ -f target/${app}-${ver}.jar ]; then
      ver=$(get_java_app_version)
      rm -rf oc-build && mkdir -p oc-build
      cp target/${app}-${ver}.jar oc-build/app.jar
    elif [ -f dist/package.json ]; then
      log_debug "found nodejs app"
    else
      log_error "No app target found!"
      exit
    fi
    # check deploy target type is war or jar
    oc project ${project_profile}
    # create build. override the exit code since it complains about exising imagestream
    if [ $(is_exist "bc" "${app}" "${project_profile}") == "no" ]; then
      log_debug "create new image stream"
      oc new-build --name=${app} --image-stream=${image_stream} --binary=true --labels=app=${app} -n ${project_profile} || true
    fi
    # build image
    log_debug "start build"
    oc start-build ${app} --from-dir="${from_dir}" --wait=true -n ${project_profile}
  else
    # tag for stage or prod
    log_debug "tag image stream"
    image_tag="${ver}"
    log_debug "image_tag: ${image_tag}, ver: ${ver}"

    # tag new image stream
    oc tag ${project}-${images_profile}/${app}:latest ${project_profile}/${app}:${image_tag}
    oc tag ${project}-${images_profile}/${app}:latest ${project_profile}/${app}:latest
    # switch to new
    oc project ${project_profile}
  fi

  if [ $? != 0 ]; then
    log_error "failed to create image stream"
    return $?
  fi

  # deploy image
  if [ $(is_exist "dc" "${app}" "${project_profile}" ) == "no" ]; then
    log_debug "create new app"
    oc new-app ${app}:latest ${env_app_options} ${env_profile} --env TZ=${timezone} -n ${project_profile}
  fi
  oc env dc ${app} DEPLOYER=$(oc whoami)

  if [ $(is_exist "route" "${app}" "${project_profile}") == "no" ]; then
    log_debug "create router"    
    oc expose svc/${app} --port=${port} -n ${project_profile}
  fi

  return $?
}

function create_package_json() {
  log_debug "create_package_json"

  cat > "$1" <<_EOF_
{
  "name": "${app}",
  "version": "${ver}",
  "description": "nodejs http-server",
  "scripts": {
    "start": "http-server . -p 8080"
  },
  "author": "John Deng",
  "license": "MIT"
}
_EOF_

}

function run() {
  cli="hi cicd deploy"

  deploy

  result=$?
  log_debug "result: $result"

  eval $1="\${result}"
  eval $2="\${cli}"
}

###############################################################################
