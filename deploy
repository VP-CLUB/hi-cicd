#!/bin/bash
###############################################################################
# Project: hi-cli
# Description: The cross platform development toolkit - hi-cli
# Author: John Deng (john.deng@outlook.com)
#
# Copyright (c) 2014-2017 John Deng (john.deng@outlook.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Author: John Deng (john.deng@outlook.com)
# Updated: Mon Mar 27 23:24:29 CST 2017
# Module: oc
# Submodule: 
# Command: deploy
###############################################################################

source "${HI_CLI_HOME}/bin/colors"
source "${HI_CLI_HOME}/bin/logging"
###############################################################################
function deploy() {
  # deploy(project, app, ver, "dev", "Asia/Shanghai")
  
  if [ "${image_stream}" == "" ]; then
    image_stream=s2i-java
  fi
  if [ "${timezone}" == "" ]; then
    timezone=Asia/Shanghai
  fi
  if [ "${images_profile}" == "" ]; then
    images_profile=dev
  fi
  if [ "${profile}" == "" ]; then
    profile=dev
  fi

  project_profile="${project}-${profile}"
  imageTag="latest"
  if [ "" != "${new}" ]; then
    from_dir="oc-build"
    rm -rf oc-build && mkdir -p oc-build
    # check deploy target type is war or jar
    log_debug "check app type"
    if [ -f ./package.json ]; then
      log_debug "found nodejs app"
      ver=$(get_nodejs_app_version)
      from_dir="dist"
      if [ "${build}" == "build" ]; then
        [ -f gulpfile.js ] && gulp build --env=${profile} || npm run build:${profile}
      fi
      create_package_json "dist/package.json"
    elif [ -f pom.xml ]; then
      log_debug "found java app"
      ver=$(get_java_app_version)
      if [ -f target/${app}.war ]; then
        mkdir -p oc-build/deployments
        cp target/${app}.war oc-build/deployments/ROOT.war
      elif [ -f target/${app}-${ver}.jar ]; then
        ver=$(get_java_app_version)
        cp target/${app}-${ver}.jar oc-build/app.jar
      else
        log_error "No app target found!"
        exit
      fi
    else
      log_error "No app target found!"
      exit
    fi  
    log_debug "deploy: ${project}/${app}, ${ver}, ${project_profile}, ${timezone} ${port}"
    oc project ${project_profile}
    # create build. override the exit code since it complains about exising imagestream
    if [ $(is_exist "bc") == "no" ]; then
      log_debug "create new image stream"
      oc new-build --name=${app} --image-stream=${image_stream} --binary=true --labels=app=${app} -n ${project_profile} || true
    fi
    # build image
    log_debug "start build"
    oc start-build ${app} --from-dir="${from_dir}" --wait=true -n ${project_profile}
  else
    # tag for stage or prod
    log_debug "tag image stream"
    imageTag="${ver}"
    oc tag ${project}-${images_profile}/${app}:latest ${project_profile}/${app}:${imageTag}
    oc project ${project_profile}
  fi

  if [ $? != 0 ]; then
    log_error "failed to create image stream"
    return $?
  fi

  # deploy image
  if [ $(is_exist "dc") == "no" ]; then
    log_debug "create new app"
    oc new-app ${app}:${imageTag} --env SPRING_PROFILES_ACTIVE=${profile} --env TZ=${timezone} -n ${project_profile}
  fi
  if [ $(is_exist "route") == "no" ]; then
    log_debug "create router"    
    oc expose svc/${app} --port=${port} -n ${project_profile}
  fi
}


function create_package_json() {
  log_debug "create_package_json"

  cat > "$1" <<_EOF_
{
  "name": "${app}",
  "version": "${ver}",
  "description": "nodejs http-server",
  "scripts": {
    "start": "http-server . -p 8080"
  },
  "author": "John Deng",
  "license": "MIT"
}
_EOF_

}

function get_java_app_version() {
  echo $(mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version|grep -Ev '(^\[|Download\w+:)')
}

function get_nodejs_app_version() {
  echo $(node -p "require('./package.json').version")
}

function is_exist() {
  if [ $(oc get $1 -n ${project_profile} | grep ${app} | wc -l) == 0 ]; then
    echo "no"
  else
    echo "yes"
  fi
}

function run() {
  cli=""

  deploy

  result=$?

  eval $1="\${result}"
  eval $2="\${cli}"
}

###############################################################################
